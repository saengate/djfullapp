#!/bin/bash
#-*- ENCODING: UTF-8 -*-

# container=container
# container_ports='-p HostPort:ContainerPort -p HostPort:ContainerPort'
# description_ports=
env=
volume='-v $(pwd)/ansible:/root/ansible'


help()
{
    echo "
    Ayuda: Comandos de ayuda para facilitar el uso del proyecto:
    Abre los puertos:
        $description_ports

    -h  | * | --help   muestran los comandos disponibles

    -b  | --build           construye el contenedor                         (docker build)
    -r  | --run             inicia y accede al contenedor                   (docker run -it)
    -rv | --run_v           inicia y accede al contenedor y agrega          (docker exec -it)
                            el volumen para los cambios en ansible
                            tengan efecto inmediato
    
    ## VAULT
    -ve | --vault_encrypt [ dev | qa | prod ]   Encrypta los valores sensibles del ambiente     (ansible-vault encrypt)
                                                especificado
    -vd | --vault_decrypt [ dev | qa | prod ]   Desencrypta los valores sensibles del ambiente  (ansible-vault decrypt)
                                                especificado
    -vr | --vault_rekey   [ dev | qa | prod ]   Cambia la llave de encryptación del ambiente    (ansible-vault rekey)
                                                especificado
    -vv | --vault_view    [ dev | qa | prod ]   Muestra los valores del ambiente especificado   (ansible-vault view)
    
    "
}

default_env()
{
    while [ "$1" != "" ]; do
        case $1 in
            dev )           env=develop
                            ;;
            qa )            env=qa
                            ;;
            prod )          env=production
                            ;;
            * )             echo "Los ambientes por defecto para el vault son: [ dev | qa | prod ]"
                            exit 1
        esac
        shift
    done
}

build()
{
    echo "Contruyendo imagen a partir del dockerfile para $container";
    docker build --no-cache -t $container .;
}

run()
{
    echo "Iniciando contenedor $container";
    docker run $container_ports --rm -it --name $container $container;
}

run_v()
{
    echo "Inciando contenedor $container con volumen a carpeta ansible";
    docker run $volume $container_ports --rm -it --name $container $container;
}

vault_encrypt()
{
    default_env $1;
    echo "Encryptando las contraseñas del vault para el ambiente '$env'";
    ansible-vault encrypt ansible/group_vars/$env/vault.yml;
}

vault_decrypt()
{
    default_env $1;
    echo "Desencryptando las contraseñas del vault para el ambiente '$env'";
    ansible-vault decrypt ansible/group_vars/$env/vault.yml;
}

vault_rekey()
{
    default_env $1;
    echo "Cambiar las contraseñas del vault para el ambiente '$env'";
    ansible-vault rekey ansible/group_vars/$env/vault.yml;
}

vault_view()
{
    default_env $1;
    echo "Mostrar las contraseñas del vault para el ambiente $env";
    ansible-vault view ansible/group_vars/$env/vault.yml;
}

if [ "$1" == "" ]; then
    help
    exit 1
fi

while [ "$1" != "" ]; do
    case $1 in
        -b | --build )          build
                                exit
                                ;;
        -r | --run )            run
                                exit
                                ;;
        -rv | --run_v )         run_v
                                exit
                                ;;
        -ve | --vault_encrypt ) vault_encrypt $2
                                exit
                                ;;
        -vd | --vault_decrypt ) vault_decrypt $2
                                exit
                                ;;
        -vr | --vault_rekey )   vault_rekey $2
                                exit
                                ;;
        -vv | --vault_view )    vault_view $2
                                exit
                                ;;
        -h | --help )           help
                                exit
                                ;;
        * )                     help
                                exit 1
    esac
    shift
done

